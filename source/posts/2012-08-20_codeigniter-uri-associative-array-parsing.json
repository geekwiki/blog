---
title: CodeIgniter URI Associative Array Parsing
slug: codeigniter-uri-associative-array-parsing
create_date: 2012-08-20 02:58:20
tags: 
updates:
  username: 2
  date: 2012-08-20 02:58:20
  comment: Initial import of post from WP
---
When using CI (CodeIgniter), I ran into a problem that would put my entire application out of play unless fixed;  I pass arrays through GET, you may ask why I would do such a thing, and I really don't care to explain.  Anyways,

> index.php?foo[]=a&foo[]=b&bar[]=c&bar[]=d Would transform into:  [php] array( [foo] =\> array( 'a', 'b' ), [bar] =\> array( 'c', 'd' ) ); [/php]  However, with the **url\_to\_assoc** , it would turn it into  [php] $foo = 'b'; $bar = 'd'; [/php]  This turns into a problem when you need arrays passed through the URL. So a couple of friends and I started to look at it, and we found out that it was the **\_url\_to\_assoc** function within **/syscore/core/URI.php**.  With a little modification from Joshya Flyer, we were able to get it to work. Now, if you pass /foo/a/foo/b/bar/c/baz/d/baz/e, foo will be an array with both a and b, bar will be string with just c, and baz will be an array with just e. The code is below.  [php] function \_uri\_to\_assoc($n = 3, $default = array(), $which = 'segment') { if ($which == 'segment') { $total\_segments = 'total\_segments'; $segment\_array = 'segment\_array'; } else { $total\_segments = 'total\_rsegments'; $segment\_array = 'rsegment\_array'; }  if ( ! is\_numeric($n)) { return $default; }  if (isset($this-\>keyval[$n])) { return $this-\>keyval[$n]; }  if ($this-\>$total\_segments() \< $n) { if (count($default) == 0) { return array(); }  $retval = array(); foreach ($default as $val) { $retval[$val] = FALSE; } return $retval; }  $segments = array\_slice($this-\>$segment\_array(), ($n - 1));  $var = array\_chunk($segments, 2);  $result = array();  /\* Custom modificatioms begin here \*/ foreach ($var as $eachSet) { if (isset($eachSet[0]) and isset($eachSet[1])) if (isset($result[$eachSet[0]])) { if (is\_array($result[$eachSet[0]])) { $result[$eachSet[0]][] = $eachSet[1]; } else { $result[$eachSet[0]] = array($result[$eachSet[0]]); $result[$eachSet[0]][] = $eachSet[1]; } } else { $result[$eachSet[0]] = $eachSet[1]; } }  // Cache the array for reuse $this-\>keyval[$n] = $result;  /\* print "URI TO ARR\<br\>"; print\_r($result); print "\<hr\>"; \*/ return $result; } [/php]  Now, of course, this entails doing just the opposite. taking an array and making it into a URI. THe code for that is below.  [php] function assoc\_to\_uri($array) { $temp = array(); foreach ($array as $key =\> $val) { if(is\_array($val)) { foreach($val as $subval) { $temp[] = $key; $temp[] = $subval; } } else { $temp[] = $key; $temp[] = $val; } } return implode('/', $temp); } [/php]  It seems to be working well for us, if you have any questions, just let us know.  I posted a thread about it on CI, they didn't seem very helpful at all: http://codeigniter.com/forums/viewthread/222168/